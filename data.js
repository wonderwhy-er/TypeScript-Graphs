window.data = {"nodes":[{"label":"extractChildrenData","text":"extractChildrenData() {\r\n        for (var i = 0; i < this.quadrants.length; i++) {\r\n            var quadrant = this.quadrants[i];\r\n            this.data.children = this.data.children.concat(quadrant.data.children);\r\n            this.data.intersectionPairs = this.data.intersectionPairs.concat(quadrant.data.intersectionPairs);\r\n        }\r\n    }"},{"label":"children","text":""},{"label":"concat","text":""},{"label":"intersectionPairs","text":""},{"label":"concat","text":""},{"label":"findIntersectionsWithSameLevel","text":"findIntersectionsWithSameLevel(item1:I, i:number) {\r\n        for (var j = i + 1; j < this.items.length; j++) {\r\n            var item2 = this.items[j];\r\n            if (item1.intersects(item2)) {\r\n                this.data.intersectionPairs.push([item1, item2]);\r\n            }\r\n        }\r\n    }"},{"label":"length","text":""},{"label":"intersects","text":""},{"label":"push","text":""},{"label":"findIntersectionsWithChildren","text":"findIntersectionsWithChildren(item1:I) {\r\n        for (var j = 0; j < this.data.children.length; j++) {\r\n            var child = this.data.children[j];\r\n            if (item1.intersects(child)) {\r\n                this.data.intersectionPairs.push([item1, child]);\r\n            }\r\n        }\r\n    }"},{"label":"length","text":""},{"label":"findLocalIntersections","text":"findLocalIntersections() {\r\n        for (var i = 0; i < this.items.length; i++) {\r\n            var item1 = this.items[i];\r\n            this.findIntersectionsWithSameLevel(item1, i)\r\n            this.findIntersectionsWithChildren(item1);\r\n        }\r\n    }"},{"label":"findIntersections","text":"findIntersections() {\r\n        this.extractChildrenData();\r\n        this.findLocalIntersections();\r\n        this.data.children = this.data.children.concat(this.items);\r\n    }"},{"label":"count","text":"count():number {\r\n        return this.items.length;\r\n    }"},{"label":"isEmpty","text":"isEmpty() {\r\n        return this.items.length == 0 && this.quadrants.length == 0;\r\n    }"},{"label":"addItem","text":"addItem(item:I) {\r\n        this.items.push(item);\r\n    }"},{"label":"push","text":""},{"label":"addItems","text":"addItems(items:I[]) {\r\n        this.items.push.apply(this.items, items);\r\n    }"},{"label":"apply","text":""},{"label":"createSubRegions","text":"createSubRegions() {\r\n        var halfX = (this.area.left + this.area.right) / 2;\r\n        var halfY = (this.area.top + this.area.bottom) / 2;\r\n        this.quadrants = [\r\n            new QuadNode<I,D>(new AABB(this.area.left, this.area.top, halfX, halfY)),\r\n            new QuadNode<I,D>(new AABB(halfX, this.area.top, this.area.right, halfY)),\r\n            new QuadNode<I,D>(new AABB(halfX, halfY, this.area.right, this.area.bottom)),\r\n            new QuadNode<I,D>(new AABB(this.area.left, halfY, halfX, this.area.bottom))\r\n        ];\r\n    }"},{"label":"left","text":""},{"label":"right","text":""},{"label":"top","text":""},{"label":"bottom","text":""},{"label":"pushDown","text":"pushDown() {\r\n        if (this.items.length > 1) {\r\n            if (this.quadrants.length == 0) {\r\n                this.createSubRegions();\r\n            }\r\n            this.sortItems();\r\n        }\r\n    }"},{"label":"extract","text":"extract():I[] {\r\n        var newItems = [];\r\n        var result = [];\r\n        for (var i = 0; i < this.items.length; i++) {\r\n            var item = this.items[i];\r\n            if (this.area.contains(item)) {\r\n                newItems.push(item);\r\n            } else {\r\n                result.push(item);\r\n            }\r\n        }\r\n        this.items = newItems;\r\n        return result;\r\n    }"},{"label":"contains","text":""},{"label":"push","text":""},{"label":"sortItems","text":"private sortItems() {\r\n        var newItems = [];\r\n        for (var i = 0; i < this.items.length; i++) {\r\n            var item = this.items[i];\r\n            var subRegion = this.findSubRegion(item);\r\n            if (subRegion) {\r\n                subRegion.addItem(item);\r\n            } else {\r\n                newItems.push(item);\r\n            }\r\n        }\r\n        this.items = newItems;\r\n    }"},{"label":"findSubRegion","text":"private findSubRegion(item:I) {\r\n        for (var j = 0; j < this.quadrants.length; j++) {\r\n            var quadrant = this.quadrants[j];\r\n            if (quadrant.area.contains(item)) {\r\n                return quadrant;\r\n            }\r\n        }\r\n    }"},{"label":"addItem","text":"addItem(item:I) {\r\n        this.root.addItem(item);\r\n    }"},{"label":"addItems","text":"addItems(items:I[]) {\r\n        this.root.addItems(items);\r\n    }"},{"label":"childrenFirst","text":"private childrenFirst(node:QuadNode<I,D>, iterator:(node:QuadNode<I,D>)=>void) {\r\n        for (var i = 0; i < node.quadrants.length; i++) {\r\n            var child = node.quadrants[i];\r\n            this.childrenFirst(child, iterator);\r\n        }\r\n        iterator(node);\r\n    }"},{"label":"length","text":""},{"label":"quadrants","text":""},{"label":"parentFirst","text":"private parentFirst(node:QuadNode<I,D>, iterator:(node:QuadNode<I,D>)=>void) {\r\n        iterator(node);\r\n        for (var i = 0; i < node.quadrants.length; i++) {\r\n            var child = node.quadrants[i];\r\n            this.parentFirst(child, iterator);\r\n        }\r\n\r\n    }"}],"links":[{"target":1,"source":0,"label":"(11:12)             this.data.children = this.data.children.concat(quadrant.data.children);\r"},{"target":2,"source":0,"label":"(11:33)             this.data.children = this.data.children.concat(quadrant.data.children);\r"},{"target":1,"source":0,"label":"(11:59)             this.data.children = this.data.children.concat(quadrant.data.children);\r"},{"target":3,"source":0,"label":"(12:12)             this.data.intersectionPairs = this.data.intersectionPairs.concat(quadrant.data.intersectionPairs);\r"},{"target":4,"source":0,"label":"(12:42)             this.data.intersectionPairs = this.data.intersectionPairs.concat(quadrant.data.intersectionPairs);\r"},{"target":3,"source":0,"label":"(12:77)             this.data.intersectionPairs = this.data.intersectionPairs.concat(quadrant.data.intersectionPairs);\r"},{"target":6,"source":5,"label":"(17:32)         for (var j = i + 1; j < this.items.length; j++) {\r"},{"target":7,"source":5,"label":"(19:16)             if (item1.intersects(item2)) {\r"},{"target":8,"source":5,"label":"(20:16)                 this.data.intersectionPairs.push([item1, item2]);\r"},{"target":10,"source":9,"label":"(26:28)         for (var j = 0; j < this.data.children.length; j++) {\r"},{"target":1,"source":9,"label":"(27:24)             var child = this.data.children[j];\r"},{"target":7,"source":9,"label":"(28:16)             if (item1.intersects(child)) {\r"},{"target":8,"source":9,"label":"(29:16)                 this.data.intersectionPairs.push([item1, child]);\r"},{"target":6,"source":11,"label":"(35:28)         for (var i = 0; i < this.items.length; i++) {\r"},{"target":1,"source":12,"label":"(45:8)         this.data.children = this.data.children.concat(this.items);\r"},{"target":2,"source":12,"label":"(45:29)         this.data.children = this.data.children.concat(this.items);\r"},{"target":6,"source":13,"label":"(52:15)         return this.items.length;\r"},{"target":6,"source":14,"label":"(56:15)         return this.items.length == 0 && this.quadrants.length == 0;\r"},{"target":16,"source":15,"label":"(72:8)         this.items.push(item);\r"},{"target":18,"source":17,"label":"(76:8)         this.items.push.apply(this.items, items);\r"},{"target":20,"source":19,"label":"(80:21)         var halfX = (this.area.left + this.area.right) / 2;\r"},{"target":21,"source":19,"label":"(80:38)         var halfX = (this.area.left + this.area.right) / 2;\r"},{"target":22,"source":19,"label":"(81:21)         var halfY = (this.area.top + this.area.bottom) / 2;\r"},{"target":23,"source":19,"label":"(81:37)         var halfY = (this.area.top + this.area.bottom) / 2;\r"},{"target":20,"source":19,"label":"(83:39)             new QuadNode<I,D>(new AABB(this.area.left, this.area.top, halfX, halfY)),\r"},{"target":22,"source":19,"label":"(83:55)             new QuadNode<I,D>(new AABB(this.area.left, this.area.top, halfX, halfY)),\r"},{"target":22,"source":19,"label":"(84:46)             new QuadNode<I,D>(new AABB(halfX, this.area.top, this.area.right, halfY)),\r"},{"target":21,"source":19,"label":"(84:61)             new QuadNode<I,D>(new AABB(halfX, this.area.top, this.area.right, halfY)),\r"},{"target":21,"source":19,"label":"(85:53)             new QuadNode<I,D>(new AABB(halfX, halfY, this.area.right, this.area.bottom)),\r"},{"target":23,"source":19,"label":"(85:70)             new QuadNode<I,D>(new AABB(halfX, halfY, this.area.right, this.area.bottom)),\r"},{"target":20,"source":19,"label":"(86:39)             new QuadNode<I,D>(new AABB(this.area.left, halfY, halfX, this.area.bottom))\r"},{"target":23,"source":19,"label":"(86:69)             new QuadNode<I,D>(new AABB(this.area.left, halfY, halfX, this.area.bottom))\r"},{"target":6,"source":24,"label":"(91:12)         if (this.items.length > 1) {\r"},{"target":6,"source":25,"label":"(109:28)         for (var i = 0; i < this.items.length; i++) {\r"},{"target":26,"source":25,"label":"(111:16)             if (this.area.contains(item)) {\r"},{"target":27,"source":25,"label":"(112:16)                 newItems.push(item);\r"},{"target":27,"source":25,"label":"(114:16)                 result.push(item);\r"},{"target":6,"source":28,"label":"(123:28)         for (var i = 0; i < this.items.length; i++) {\r"},{"target":27,"source":28,"label":"(129:16)                 newItems.push(item);\r"},{"target":26,"source":29,"label":"(138:16)             if (quadrant.area.contains(item)) {\r"},{"target":15,"source":30,"label":"(12:8)         this.root.addItem(item);\r"},{"target":17,"source":31,"label":"(16:8)         this.root.addItems(items);\r"},{"target":33,"source":32,"label":"(24:28)         for (var i = 0; i < node.quadrants.length; i++) {\r"},{"target":34,"source":32,"label":"(25:24)             var child = node.quadrants[i];\r"},{"target":33,"source":35,"label":"(37:28)         for (var i = 0; i < node.quadrants.length; i++) {\r"},{"target":34,"source":35,"label":"(38:24)             var child = node.quadrants[i];\r"}],"groups":[{"leaves":[0,5,9,11,12,13,14,15,17,19,24,25,28,29,33,34],"style":"fill:#ffdd3c;fill-opacity:0.37254902000000001;stroke:#ffdd3c;stroke-opacity:1","padding":10,"label":"QuadNode"},{"leaves":[1,3],"style":"fill:#ffdd3c;fill-opacity:0.37254902000000001;stroke:#ffdd3c;stroke-opacity:1","padding":10,"label":"D"},{"leaves":[2,10],"style":"fill:#ffdd3c;fill-opacity:0.37254902000000001;stroke:#ffdd3c;stroke-opacity:1","padding":10,"label":"AABB[]"},{"leaves":[4,8],"style":"fill:#ffdd3c;fill-opacity:0.37254902000000001;stroke:#ffdd3c;stroke-opacity:1","padding":10,"label":"AABB[][]"},{"leaves":[6,16],"style":"fill:#ffdd3c;fill-opacity:0.37254902000000001;stroke:#ffdd3c;stroke-opacity:1","padding":10,"label":"I[]"},{"leaves":[7],"style":"fill:#ffdd3c;fill-opacity:0.37254902000000001;stroke:#ffdd3c;stroke-opacity:1","padding":10,"label":"I"},{"leaves":[18],"style":"fill:#ffdd3c;fill-opacity:0.37254902000000001;stroke:#ffdd3c;stroke-opacity:1","padding":10,"label":"(...items: I[]) => number"},{"leaves":[20,21,22,23,26],"style":"fill:#ffdd3c;fill-opacity:0.37254902000000001;stroke:#ffdd3c;stroke-opacity:1","padding":10,"label":"AABB"},{"leaves":[27],"style":"fill:#ffdd3c;fill-opacity:0.37254902000000001;stroke:#ffdd3c;stroke-opacity:1","padding":10,"label":"any[]"},{"leaves":[30,31,32,35],"style":"fill:#ffdd3c;fill-opacity:0.37254902000000001;stroke:#ffdd3c;stroke-opacity:1","padding":10,"label":"QuadTree"}],"constraints":[]}